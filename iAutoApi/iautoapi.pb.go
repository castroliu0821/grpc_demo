// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iautoapi.proto

package iAutoApi

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Requestor struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Requestor) Reset()         { *m = Requestor{} }
func (m *Requestor) String() string { return proto.CompactTextString(m) }
func (*Requestor) ProtoMessage()    {}
func (*Requestor) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de1364dd7116b49, []int{0}
}

func (m *Requestor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Requestor.Unmarshal(m, b)
}
func (m *Requestor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Requestor.Marshal(b, m, deterministic)
}
func (m *Requestor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Requestor.Merge(m, src)
}
func (m *Requestor) XXX_Size() int {
	return xxx_messageInfo_Requestor.Size(m)
}
func (m *Requestor) XXX_DiscardUnknown() {
	xxx_messageInfo_Requestor.DiscardUnknown(m)
}

var xxx_messageInfo_Requestor proto.InternalMessageInfo

func (m *Requestor) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type EmployeeInfo struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Department           string   `protobuf:"bytes,3,opt,name=department,proto3" json:"department,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmployeeInfo) Reset()         { *m = EmployeeInfo{} }
func (m *EmployeeInfo) String() string { return proto.CompactTextString(m) }
func (*EmployeeInfo) ProtoMessage()    {}
func (*EmployeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de1364dd7116b49, []int{1}
}

func (m *EmployeeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmployeeInfo.Unmarshal(m, b)
}
func (m *EmployeeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmployeeInfo.Marshal(b, m, deterministic)
}
func (m *EmployeeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmployeeInfo.Merge(m, src)
}
func (m *EmployeeInfo) XXX_Size() int {
	return xxx_messageInfo_EmployeeInfo.Size(m)
}
func (m *EmployeeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EmployeeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EmployeeInfo proto.InternalMessageInfo

func (m *EmployeeInfo) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *EmployeeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EmployeeInfo) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

type SRequestor struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mesg                 string   `protobuf:"bytes,2,opt,name=mesg,proto3" json:"mesg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SRequestor) Reset()         { *m = SRequestor{} }
func (m *SRequestor) String() string { return proto.CompactTextString(m) }
func (*SRequestor) ProtoMessage()    {}
func (*SRequestor) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de1364dd7116b49, []int{2}
}

func (m *SRequestor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRequestor.Unmarshal(m, b)
}
func (m *SRequestor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRequestor.Marshal(b, m, deterministic)
}
func (m *SRequestor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRequestor.Merge(m, src)
}
func (m *SRequestor) XXX_Size() int {
	return xxx_messageInfo_SRequestor.Size(m)
}
func (m *SRequestor) XXX_DiscardUnknown() {
	xxx_messageInfo_SRequestor.DiscardUnknown(m)
}

var xxx_messageInfo_SRequestor proto.InternalMessageInfo

func (m *SRequestor) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SRequestor) GetMesg() string {
	if m != nil {
		return m.Mesg
	}
	return ""
}

type SResponsor struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mesg                 string   `protobuf:"bytes,2,opt,name=mesg,proto3" json:"mesg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SResponsor) Reset()         { *m = SResponsor{} }
func (m *SResponsor) String() string { return proto.CompactTextString(m) }
func (*SResponsor) ProtoMessage()    {}
func (*SResponsor) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de1364dd7116b49, []int{3}
}

func (m *SResponsor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SResponsor.Unmarshal(m, b)
}
func (m *SResponsor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SResponsor.Marshal(b, m, deterministic)
}
func (m *SResponsor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SResponsor.Merge(m, src)
}
func (m *SResponsor) XXX_Size() int {
	return xxx_messageInfo_SResponsor.Size(m)
}
func (m *SResponsor) XXX_DiscardUnknown() {
	xxx_messageInfo_SResponsor.DiscardUnknown(m)
}

var xxx_messageInfo_SResponsor proto.InternalMessageInfo

func (m *SResponsor) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SResponsor) GetMesg() string {
	if m != nil {
		return m.Mesg
	}
	return ""
}

func init() {
	proto.RegisterType((*Requestor)(nil), "iAutoApi.Requestor")
	proto.RegisterType((*EmployeeInfo)(nil), "iAutoApi.EmployeeInfo")
	proto.RegisterType((*SRequestor)(nil), "iAutoApi.SRequestor")
	proto.RegisterType((*SResponsor)(nil), "iAutoApi.SResponsor")
}

func init() { proto.RegisterFile("iautoapi.proto", fileDescriptor_5de1364dd7116b49) }

var fileDescriptor_5de1364dd7116b49 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0xad, 0x03, 0x14, 0x7a, 0xa0, 0x22, 0x19, 0x54, 0x45, 0x1d, 0x00, 0x79, 0xea, 0x14, 0x55,
	0xf0, 0x01, 0x90, 0xa1, 0x42, 0x1d, 0x10, 0x52, 0xd8, 0xd8, 0x5c, 0x72, 0x14, 0x4b, 0xd8, 0x67,
	0xe2, 0xcb, 0xd0, 0x7f, 0xe0, 0xa3, 0x91, 0x43, 0x8a, 0xdb, 0x8d, 0xed, 0xf9, 0xf9, 0xbd, 0xe7,
	0x7b, 0x3e, 0x18, 0x1b, 0xdd, 0x32, 0x69, 0x6f, 0x0a, 0xdf, 0x10, 0x93, 0x3c, 0x31, 0x65, 0xcb,
	0x54, 0x7a, 0xa3, 0xae, 0x61, 0x54, 0xe1, 0x57, 0x8b, 0x81, 0xa9, 0x91, 0x12, 0x0e, 0x79, 0xe3,
	0x31, 0x17, 0x37, 0x62, 0x36, 0xaa, 0x3a, 0xac, 0x5e, 0xe1, 0x6c, 0x61, 0xfd, 0x27, 0x6d, 0x10,
	0x97, 0xee, 0x9d, 0xe4, 0x04, 0x86, 0xae, 0xb5, 0x2b, 0x6c, 0x3a, 0xd5, 0x51, 0xd5, 0x9f, 0xa2,
	0xd7, 0x69, 0x8b, 0x79, 0xf6, 0xeb, 0x8d, 0x58, 0x5e, 0x01, 0xd4, 0xe8, 0x75, 0xc3, 0x16, 0x1d,
	0xe7, 0x07, 0xdd, 0xcd, 0x0e, 0xa3, 0xe6, 0x00, 0x2f, 0xe9, 0xf5, 0x31, 0x64, 0xa6, 0xee, 0x53,
	0x33, 0x53, 0xc7, 0x44, 0x8b, 0x61, 0xbd, 0x4d, 0x8c, 0xb8, 0x77, 0x04, 0x4f, 0x2e, 0xfc, 0xcf,
	0x71, 0xfb, 0x2d, 0xe0, 0x78, 0x19, 0xdb, 0x3e, 0x97, 0xf2, 0x01, 0xce, 0x1f, 0x91, 0xf7, 0xea,
	0x5c, 0x14, 0xdb, 0xaf, 0x28, 0xfe, 0x26, 0x99, 0x4e, 0x12, 0xb9, 0x2b, 0x56, 0x03, 0x79, 0x0f,
	0xa7, 0x8b, 0xb7, 0x0f, 0x7a, 0xc2, 0x10, 0xf4, 0x1a, 0xe5, 0x65, 0x12, 0xa6, 0x22, 0xd3, 0x7d,
	0xb6, 0x1f, 0x56, 0x0d, 0x66, 0x62, 0x2e, 0x56, 0xc3, 0x6e, 0x01, 0x77, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x7e, 0x25, 0xfb, 0x47, 0x92, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IAutoOAClient is the client API for IAutoOA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IAutoOAClient interface {
	GetEmployeeInfo(ctx context.Context, in *Requestor, opts ...grpc.CallOption) (*EmployeeInfo, error)
	EchoMessage(ctx context.Context, opts ...grpc.CallOption) (IAutoOA_EchoMessageClient, error)
}

type iAutoOAClient struct {
	cc *grpc.ClientConn
}

func NewIAutoOAClient(cc *grpc.ClientConn) IAutoOAClient {
	return &iAutoOAClient{cc}
}

func (c *iAutoOAClient) GetEmployeeInfo(ctx context.Context, in *Requestor, opts ...grpc.CallOption) (*EmployeeInfo, error) {
	out := new(EmployeeInfo)
	err := c.cc.Invoke(ctx, "/iAutoApi.IAutoOA/GetEmployeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAutoOAClient) EchoMessage(ctx context.Context, opts ...grpc.CallOption) (IAutoOA_EchoMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IAutoOA_serviceDesc.Streams[0], "/iAutoApi.IAutoOA/EchoMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAutoOAEchoMessageClient{stream}
	return x, nil
}

type IAutoOA_EchoMessageClient interface {
	Send(*SRequestor) error
	Recv() (*SResponsor, error)
	grpc.ClientStream
}

type iAutoOAEchoMessageClient struct {
	grpc.ClientStream
}

func (x *iAutoOAEchoMessageClient) Send(m *SRequestor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iAutoOAEchoMessageClient) Recv() (*SResponsor, error) {
	m := new(SResponsor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IAutoOAServer is the server API for IAutoOA service.
type IAutoOAServer interface {
	GetEmployeeInfo(context.Context, *Requestor) (*EmployeeInfo, error)
	EchoMessage(IAutoOA_EchoMessageServer) error
}

// UnimplementedIAutoOAServer can be embedded to have forward compatible implementations.
type UnimplementedIAutoOAServer struct {
}

func (*UnimplementedIAutoOAServer) GetEmployeeInfo(ctx context.Context, req *Requestor) (*EmployeeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeInfo not implemented")
}
func (*UnimplementedIAutoOAServer) EchoMessage(srv IAutoOA_EchoMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoMessage not implemented")
}

func RegisterIAutoOAServer(s *grpc.Server, srv IAutoOAServer) {
	s.RegisterService(&_IAutoOA_serviceDesc, srv)
}

func _IAutoOA_GetEmployeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requestor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAutoOAServer).GetEmployeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iAutoApi.IAutoOA/GetEmployeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAutoOAServer).GetEmployeeInfo(ctx, req.(*Requestor))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAutoOA_EchoMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IAutoOAServer).EchoMessage(&iAutoOAEchoMessageServer{stream})
}

type IAutoOA_EchoMessageServer interface {
	Send(*SResponsor) error
	Recv() (*SRequestor, error)
	grpc.ServerStream
}

type iAutoOAEchoMessageServer struct {
	grpc.ServerStream
}

func (x *iAutoOAEchoMessageServer) Send(m *SResponsor) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iAutoOAEchoMessageServer) Recv() (*SRequestor, error) {
	m := new(SRequestor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IAutoOA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iAutoApi.IAutoOA",
	HandlerType: (*IAutoOAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmployeeInfo",
			Handler:    _IAutoOA_GetEmployeeInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoMessage",
			Handler:       _IAutoOA_EchoMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "iautoapi.proto",
}
